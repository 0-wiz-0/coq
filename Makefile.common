
#######################################################################
#  v      #   The Coq Proof Assistant  /  The Coq Development Team    #
# <O___,, #        INRIA-Rocquencourt  &  LRI-CNRS-Orsay              #
#   \VV/  #############################################################
#    //   #      This file is distributed under the terms of the      #
#         #       GNU Lesser General Public License Version 2.1       #
#######################################################################

-include config/Makefile

###########################################################################
# Executables
###########################################################################

COQMKTOPBYTE:=bin/coqmktop.byte$(EXE)
COQMKTOPOPT:=bin/coqmktop.opt$(EXE)
BESTCOQMKTOP:=bin/coqmktop.$(BEST)$(EXE)
COQMKTOP:=bin/coqmktop$(EXE) 
COQCBYTE:=bin/coqc.byte$(EXE)
COQCOPT:=bin/coqc.opt$(EXE)
BESTCOQC:=bin/coqc.$(BEST)$(EXE)
COQC:=bin/coqc$(EXE)
COQTOPBYTE:=bin/coqtop.byte$(EXE)
COQTOPOPT:=bin/coqtop.opt$(EXE)
BESTCOQTOP:=bin/coqtop.$(BEST)$(EXE)
COQTOPEXE:=bin/coqtop$(EXE)
CHICKENBYTE:=bin/coqchk.byte$(EXE)
CHICKENOPT:=bin/coqchk.opt$(EXE)
BESTCHICKEN:=bin/coqchk.$(BEST)$(EXE)
CHICKEN:=bin/coqchk$(EXE)

ifneq ($(HASNATDYNLINK),false)
  DYNLINKCMXA:=dynlink.cmxa
  NATDYNLINKDEF:=-DHasDynlink
  DEPNATDYN:=
else
  DYNLINKCMXA:=
  NATDYNLINKDEF:=
  DEPNATDYN:=-natdynlink no
endif

INSTALLBIN:=install
INSTALLLIB:=install -m 644 
INSTALLSH:=./install.sh
MKDIR:=install -d

COQIDEBYTE:=bin/coqide.byte$(EXE)
COQIDEOPT:=bin/coqide.opt$(EXE)
COQIDE:=bin/coqide$(EXE)

ifeq ($(BEST),opt)
COQBINARIES:= $(COQMKTOP) $(COQC) \
  $(COQTOPBYTE) $(COQTOPOPT) $(COQTOPEXE) $(CHICKENBYTE) $(CHICKENOPT) $(CHICKEN)
else
COQBINARIES:= $(COQMKTOP) $(COQC) \
  $(COQTOPBYTE)              $(COQTOPEXE) $(CHICKENBYTE)               $(CHICKEN)
endif
OTHERBINARIES:=$(COQMKTOPBYTE) $(COQCBYTE)

CSDPCERT:=plugins/micromega/csdpcert$(EXE)

SRCDIRS:=\
  config 	tools 		tools/coqdoc 	scripts		lib \
  kernel	kernel/byterun	library 	proofs 		tactics \
  pretyping	interp		toplevel 	parsing 	ide/utils \
  ide		\
  $(addprefix plugins/, \
    omega	romega 		micromega 	quote		ring	dp \
    setoid_ring xml 		extraction 	interface 	fourier \
    cc 		funind 		firstorder 	field 		subtac \
    rtauto 	groebner )

# Order is relevent here because kernel and checker contain files
# with the same name
CHKSRCDIRS:= checker lib config kernel

###########################################################################
# tools
###########################################################################

COQDEP:=bin/coqdep$(EXE)
COQDEPBOOT:=bin/coqdep_boot$(EXE)
COQMAKEFILE:=bin/coq_makefile$(EXE)
GALLINA:=bin/gallina$(EXE)
COQTEX:=bin/coq-tex$(EXE)
COQWC:=bin/coqwc$(EXE)
COQDOC:=bin/coqdoc$(EXE)

TOOLS:=$(COQDEP) $(COQDEPBOOT) $(COQMAKEFILE) $(GALLINA) $(COQTEX) $(COQWC) $(COQDOC)

###########################################################################
# Documentation
###########################################################################

LATEX:=latex
BIBTEX:=BIBINPUTS=.: bibtex -min-crossrefs=10
MAKEINDEX:=makeindex
PDFLATEX:=pdflatex
HEVEA:=hevea
HEVEAOPTS:=-fix -exec xxdate.exe
HEVEALIB:=/usr/local/lib/hevea:/usr/lib/hevea
HTMLSTYLE:=simple
export TEXINPUTS:=$(COQSRC)/doc:$(HEVEALIB):
COQTEXOPTS:=-n 72 -image "$(COQSRC)/$(COQTOPEXE) -boot" -sl -small

DOCCOMMON:=doc/common/version.tex doc/common/title.tex doc/common/macros.tex 

REFMANCOQTEXFILES:=$(addprefix doc/refman/, \
  RefMan-gal.v.tex RefMan-ext.v.tex \
  RefMan-mod.v.tex RefMan-tac.v.tex \
  RefMan-cic.v.tex RefMan-lib.v.tex \
  RefMan-tacex.v.tex RefMan-syn.v.tex \
  RefMan-oth.v.tex RefMan-ltac.v.tex \
  RefMan-decl.v.tex \
  Cases.v.tex Coercion.v.tex Extraction.v.tex \
  Program.v.tex Omega.v.tex Micromega.v.tex Polynom.v.tex \
  Setoid.v.tex Helm.tex Classes.v.tex )

REFMANTEXFILES:=$(addprefix doc/refman/, \
  headers.sty Reference-Manual.tex \
  RefMan-pre.tex RefMan-int.tex RefMan-pro.tex RefMan-com.tex \
  RefMan-uti.tex RefMan-ide.tex RefMan-add.tex RefMan-modr.tex \
  ExternalProvers.tex ) \
  $(REFMANCOQTEXFILES) \

REFMANEPSFILES:=doc/refman/coqide.eps doc/refman/coqide-queries.eps

REFMANFILES:=$(REFMANTEXFILES) $(DOCCOMMON) $(REFMANEPSFILES) doc/refman/biblio.bib

REFMANPNGFILES:=$(REFMANEPSFILES:.eps=.png)



###########################################################################
# Object and Source files 
###########################################################################

COQRUN := coqrun
LIBCOQRUN:=kernel/byterun/lib$(COQRUN).a
DLLCOQRUN:=$(dir $(LIBCOQRUN))dll$(COQRUN)$(DLLEXT)

CLIBS:=unix.cma

CAMLP4OBJS:=gramlib.cma

CONFIG:=config/coq_config.cmo

BYTERUN:=$(addprefix kernel/byterun/, \
  coq_fix_code.o coq_memory.o coq_values.o coq_interp.o )

# LINK ORDER:
# Beware that highparsing.cma should appear before hightactics.cma
# respecting this order is useful for developers that want to load or link
# the libraries directly

CORECMA:=lib/lib.cma kernel/kernel.cma library/library.cma \
        pretyping/pretyping.cma interp/interp.cma proofs/proofs.cma \
        parsing/parsing.cma tactics/tactics.cma toplevel/toplevel.cma \
        parsing/highparsing.cma tactics/hightactics.cma

OMEGACMA:=plugins/omega/omega_plugin.cma
ROMEGACMA:=plugins/romega/romega_plugin.cma
MICROMEGACMA:=plugins/micromega/micromega_plugin.cma
QUOTECMA:=plugins/quote/quote_plugin.cma
RINGCMA:=plugins/ring/ring_plugin.cma
NEWRINGCMA:=plugins/setoid_ring/newring_plugin.cma
GBCMA:=plugins/groebner/groebner_plugin.cma
DPCMA:=plugins/dp/dp_plugin.cma
FIELDCMA:=plugins/field/field_plugin.cma
XMLCMA:=plugins/xml/xml_plugin.cma
FOURIERCMA:=plugins/fourier/fourier_plugin.cma
EXTRACTIONCMA:=plugins/extraction/extraction_plugin.cma
FUNINDCMA:=plugins/funind/recdef_plugin.cma
FOCMA:=plugins/firstorder/ground_plugin.cma
CCCMA:=plugins/cc/cc_plugin.cma
SUBTACCMA:=plugins/subtac/subtac_plugin.cma
RTAUTOCMA:=plugins/rtauto/rtauto_plugin.cma

PLUGINSCMA:=$(OMEGACMA) $(ROMEGACMA) $(MICROMEGACMA) \
        $(QUOTECMA) $(RINGCMA) $(NEWRINGCMA) $(DPCMA) $(FIELDCMA) \
        $(FOURIERCMA) $(EXTRACTIONCMA) $(XMLCMA) \
        $(CCCMA)  $(FOCMA) $(SUBTACCMA) $(RTAUTOCMA) \
        $(FUNINDCMA) $(GBCMA)

ifneq ($(HASNATDYNLINK),false)
 STATICPLUGINS:=
 INITPLUGINS:=$(EXTRACTIONCMA) $(FOCMA) $(CCCMA) $(DPCMA) \
	$(XMLCMA) $(FUNINDCMA) $(SUBTACCMA)
 INITPLUGINSOPT:=$(INITPLUGINS:.cma=.cmxs)
 PLUGINS:=$(PLUGINSCMA)
 PLUGINSOPT:=$(PLUGINSCMA:.cma=.cmxs)
else
 STATICPLUGINS:=$(PLUGINSCMA)
 INITPLUGINS:=
 INITPLUGINSOPT:=
 PLUGINS:=
 PLUGINSOPT:=
endif

CMA:=$(CLIBS) $(CAMLP4OBJS)
CMXA:=$(CMA:.cma=.cmxa)

LINKCMO:=$(CONFIG) $(CORECMA) $(STATICPLUGINS)
LINKCMX:=$(CONFIG:.cmo=.cmx) $(CORECMA:.cma=.cmxa) $(STATICPLUGINS:.cma=.cmxa)

# modules known by the toplevel of Coq

OBJSMOD:=Coq_config \
 $(foreach lib,$(CORECMA),$(shell cat $(lib:.cma=.mllib)))

IDEMOD:=$(shell cat ide/ide.mllib)

# coqmktop, coqc

COQENVCMO:=$(CONFIG) \
  lib/pp_control.cmo lib/pp.cmo  lib/compat.cmo lib/flags.cmo \
  lib/util.cmo lib/system.cmo lib/envars.cmo

COQMKTOPCMO:=$(COQENVCMO) scripts/tolink.cmo scripts/coqmktop.cmo 
COQMKTOPCMX:=$(COQMKTOPCMO:.cmo=.cmx)

COQCCMO:=$(COQENVCMO) toplevel/usage.cmo scripts/coqc.cmo
COQCCMX:=$(COQCCMO:.cmo=.cmx)

## Pcoq tools : coq-interface, coq-parser

COQINTERFACE:=bin/coq-interface$(EXE) bin/coq-parser$(EXE)

INTERFACECMA:=plugins/interface/coqinterface_plugin.cma
PARSERCMA:=plugins/interface/coqparser_plugin.cma

ifeq ($(HASNATDYNLINK),false)
 ifeq ($(BEST),opt)
  COQINTERFACE:=$(COQINTERFACE) bin/coq-interface.opt$(EXE) bin/coq-parser.opt$(EXE)
 endif
 INTERFACERC:= plugins/interface/vernacrc
 PCOQPLUGINS:=
else
 INTERFACERC:= plugins/interface/vernacrc plugins/interface/CoqParser.v
 PCOQPLUGINS:=$(INTERFACECMA) $(PARSERCMA)
endif

PARSERREQUIRES:=$(LINKCMO) $(LIBCOQRUN) $(PARSERCMA) # Solution de facilitÃ©...
PARSERREQUIRESCMX:=$(LINKCMX) $(PARSERCMA:.cma=.cmxa)

## Misc

CSDPCERTCMO:=$(addprefix plugins/micromega/, \
  mutils.cmo 	micromega.cmo 	mfourier.cmo 	certificate.cmo \
  sos.cmo 	csdpcert.cmo )
CSDPCERTCMX:= $(CSDPCERTCMO:.cmo=.cmx)

DEBUGPRINTERS:=dev/top_printers.cmo dev/vm_printers.cmo dev/printers.cma

COQDEPBOOTML:=tools/coqdep_lexer.ml tools/coqdep_common.ml tools/coqdep_boot.ml
COQDEPML:=tools/coqdep_lexer.ml tools/coqdep_common.ml tools/coqdep.ml

COQDEPCMO:=$(COQENVCMO) $(COQDEPML:.ml=.cmo)
COQDEPCMX:=$(COQDEPCMO:.cmo=.cmx)

GALLINACMO:=tools/gallina_lexer.cmo tools/gallina.cmo
GALLINACMX:=$(GALLINACMO:.cmo=.cmx)

COQDOCCMO:=$(CONFIG) $(addprefix tools/coqdoc/, \
  cdglobals.cmo alpha.cmo index.cmo output.cmo cpretty.cmo main.cmo )
COQDOCCMX:=$(COQDOCCMO:.cmo=.cmx)

# grammar modules with camlp4

GRAMMARCMA:=parsing/grammar.cma

GRAMMARML4:=lib/compat.ml4 lib/pp.ml4 parsing/q_util.ml4 parsing/pcoq.ml4 \
  parsing/argextend.ml4 parsing/tacextend.ml4 parsing/vernacextend.ml4 \
  parsing/g_prim.ml4 parsing/g_tactic.ml4 \
  parsing/g_ltac.ml4 parsing/g_constr.ml4 \
  parsing/lexer.ml4 parsing/q_coqast.ml4

STAGE1_ML4:=$(GRAMMARML4) parsing/q_constr.ml4
STAGE1:=parsing/grammar.cma parsing/q_constr.cmo


###########################################################################
# vo files
###########################################################################

## Theories

INITVO:=$(addprefix theories/Init/, \
 Notations.vo	Datatypes.vo	Peano.vo	Logic.vo	\
 Specif.vo	Logic_Type.vo  	Wf.vo		Tactics.vo	\
 Prelude.vo )

LOGICVO:=$(addprefix theories/Logic/, \
 Hurkens.vo               ProofIrrelevance.vo      Classical.vo 	\
 Classical_Type.vo        Classical_Pred_Set.vo    Eqdep.vo     	\
 Classical_Prop.vo        Classical_Pred_Type.vo   ClassicalFacts.vo 	\
 ChoiceFacts.vo           Berardi.vo               Eqdep_dec.vo 	\
 Decidable.vo             JMeq.vo                  ClassicalChoice.vo 	\
 ClassicalDescription.vo  RelationalChoice.vo      Diaconescu.vo 	\
 EqdepFacts.vo            ProofIrrelevanceFacts.vo ClassicalEpsilon.vo 	\
 ClassicalUniqueChoice.vo DecidableType.vo         DecidableTypeEx.vo 	\
 Epsilon.vo               ConstructiveEpsilon.vo   Description.vo 	\
 IndefiniteDescription.vo SetIsType.vo             FunctionalExtensionality.vo )

ARITHVO:=$(addprefix theories/Arith/, \
 Arith.vo	Gt.vo          	Between.vo	Le.vo         	\
 Compare.vo	Lt.vo          	Compare_dec.vo	Min.vo        	\
 Div2.vo	Minus.vo       	Mult.vo		Even.vo       	\
 EqNat.vo	Peano_dec.vo   	Euclid.vo	Plus.vo		\
 Wf_nat.vo  	Max.vo		Bool_nat.vo	Factorial.vo	\
 Arith_base.vo )

SORTINGVO:=$(addprefix theories/Sorting/, \
 Heap.vo 	Permutation.vo	Sorting.vo 	PermutSetoid.vo \
 PermutEq.vo )

BOOLVO:=$(addprefix theories/Bool/, \
 Bool.vo  	IfProp.vo    	Zerob.vo 	DecBool.vo 	\
 Sumbool.vo 	BoolEq.vo    	Bvector.vo )

NARITHVO:=$(addprefix theories/NArith/, \
 BinPos.vo	Pnat.vo      	BinNat.vo   	NArith.vo 	\
 Nnat.vo	Ndigits.vo   	Ndec.vo	 	Ndist.vo 	)

ZARITHVO:=$(addprefix theories/ZArith/, \
 BinInt.vo      Wf_Z.vo 	ZArith.vo      	ZArith_dec.vo 	\
 auxiliary.vo   Zmisc.vo 	Zcompare.vo    	Znat.vo 	\
 Zorder.vo      Zabs.vo 	Zmin.vo        	Zmax.vo 	\
 Zminmax.vo     Zeven.vo 	Zhints.vo	Zlogarithm.vo 	\
 Zpower.vo 	Zcomplements.vo Zdiv.vo		Zsqrt.vo 	\
 Zwf.vo		ZArith_base.vo 	Zbool.vo	Zbinary.vo 	\
 Znumtheory.vo  Int.vo 		Zpow_def.vo	Zpow_facts.vo 	\
 ZOdiv_def.vo   ZOdiv.vo 	Zgcd_alt.vo )

QARITHVO:=$(addprefix theories/QArith/, \
 QArith_base.vo Qreduction.vo 	Qring.vo	Qreals.vo 	\
 QArith.vo	Qcanon.vo 	Qfield.vo	Qpower.vo 	\
 Qabs.vo        Qround.vo )

LISTSVO:=$(addprefix theories/Lists/, \
 MonoList.vo  	ListSet.vo   	Streams.vo 	StreamMemo.vo  \
 TheoryList.vo	List.vo 	SetoidList.vo   ListTactics.vo )

STRINGSVO:=$(addprefix theories/Strings/, \
 Ascii.vo      	String.vo )

SETSVO:=$(addprefix theories/Sets/, \
 Classical_sets.vo    	Permut.vo \
 Constructive_sets.vo 	Powerset.vo \
 Cpo.vo               	Powerset_Classical_facts.vo \
 Ensembles.vo         	Powerset_facts.vo \
 Finite_sets.vo       	Relations_1.vo \
 Finite_sets_facts.vo 	Relations_1_facts.vo \
 Image.vo             	Relations_2.vo \
 Infinite_sets.vo     	Relations_2_facts.vo \
 Integers.vo          	Relations_3.vo \
 Multiset.vo          	Relations_3_facts.vo \
 Partial_Order.vo     	Uniset.vo )

FSETSBASEVO:=$(addprefix theories/FSets/, \
 OrderedType.vo		OrderedTypeEx.vo	OrderedTypeAlt.vo	\
 FSetInterface.vo	FSetList.vo 		FSetBridge.vo        	\
 FSetFacts.vo 		FSetProperties.vo	FSetEqProperties.vo 	\
 FSetWeakList.vo 	FSetAVL.vo           	FSetDecide.vo 		\
 FSets.vo \
 FMapInterface.vo       FMapList.vo		FMapFacts.vo 		\
 FMapWeakList.vo      	FMapPositive.vo		FSetToFiniteSet.vo   	\
 FMaps.vo )            

FSETS_basic:=

FSETS_all:=$(addprefix theories/FSets/, \
 FSetFullAVL.vo 	FMapAVL.vo 		FMapFullAVL.vo )

FSETSVO:=$(FSETSBASEVO) $(FSETS_$(FSETS))

ALLFSETS:=$(FSETSBASEVO) $(FSETS_all)

RELATIONSVO:=$(addprefix theories/Relations/, \
 Operators_Properties.vo	Relation_Definitions.vo \
 Relation_Operators.vo 		Relations.vo )

WELLFOUNDEDVO:=$(addprefix theories/Wellfounded/, \
 Disjoint_Union.vo 	Inclusion.vo 	Inverse_Image.vo \
 Transitive_Closure.vo  Union.vo 	Wellfounded.vo 	 \
 Well_Ordering.vo 	Lexicographic_Product.vo         \
 Lexicographic_Exponentiation.vo )

REALSBASEVO:=$(addprefix theories/Reals/, \
 Rdefinitions.vo Raxioms.vo      RIneq.vo	DiscrR.vo \
 Rbase.vo 	 LegacyRfield.vo Rpow_def.vo )

REALS_basic:= 

REALS_all:=$(addprefix theories/Reals/, \
 R_Ifp.vo 	Rbasic_fun.vo	R_sqr.vo	SplitAbsolu.vo	\
 SplitRmult.vo	ArithProp.vo    Rfunctions.vo	Rseries.vo      \
 SeqProp.vo 	Rcomplete.vo    PartSum.vo	AltSeries.vo    \
 Binomial.vo	Rsigma.vo       Rprod.vo	Cauchy_prod.vo  \
 Alembert.vo	SeqSeries.vo    Rtrigo_fun.vo	Rtrigo_def.vo   \
 Rtrigo_alt.vo  Cos_rel.vo      Cos_plus.vo	Rtrigo.vo       \
 Rlimit.vo	Rderiv.vo       RList.vo	Ranalysis1.vo   \
 Ranalysis2.vo	Ranalysis3.vo   Rtopology.vo	MVT.vo          \
 PSeries_reg.vo Exp_prop.vo     Rtrigo_reg.vo	Rsqrt_def.vo    \
 R_sqrt.vo	Rtrigo_calc.vo  Rgeom.vo	Sqrt_reg.vo     \
 Ranalysis4.vo	Rpower.vo       Ranalysis.vo	NewtonInt.vo    \
 RiemannInt_SF.vo		RiemannInt.vo   Integration.vo 	\
 Rlogic.vo	Reals.vo )

REALSVO:=$(REALSBASEVO) $(REALS_$(REALS))

ALLREALS:=$(REALSBASEVO) $(REALS_all)

NUMBERSCOMMONVO:=$(addprefix theories/Numbers/, \
 NaryFunctions.vo NumPrelude.vo BigNumPrelude.vo )

CYCLICABSTRACTVO:=$(addprefix theories/Numbers/Cyclic/Abstract/, \
 CyclicAxioms.vo NZCyclic.vo )

CYCLICINT31VO:=$(addprefix theories/Numbers/Cyclic/Int31/, \
 Int31.vo Cyclic31.vo )

CYCLICDOUBLECYCLICVO:=$(addprefix theories/Numbers/Cyclic/DoubleCyclic/, \
 DoubleType.vo	DoubleBase.vo	DoubleAdd.vo	DoubleSub.vo	\
 DoubleMul.vo	DoubleDivn1.vo 	DoubleDiv.vo	DoubleSqrt.vo	\
 DoubleLift.vo 	DoubleCyclic.vo )

CYCLICZMODULOVO := $(addprefix theories/Numbers/Cyclic/ZModulo/, \
 ZModulo.vo )

CYCLICVO:=$(CYCLICABSTRACTVO) $(CYCLICINT31VO) $(CYCLICDOUBLECYCLICVO) \
 $(CYCLICZMODULOVO)

NATINTVO:=$(addprefix theories/Numbers/NatInt/, \
 NZAxioms.vo	NZBase.vo	NZAdd.vo	NZMul.vo	\
 NZOrder.vo 	NZAddOrder.vo	NZMulOrder.vo )

NATURALABSTRACTVO:=$(addprefix theories/Numbers/Natural/Abstract/, \
 NAxioms.vo 	NBase.vo 	NAdd.vo 	NMul.vo 	\
 NOrder.vo 	NAddOrder.vo	NMulOrder.vo 	NSub.vo	\
 NIso.vo )

NATURALPEANOVO:=$(addprefix theories/Numbers/Natural/Peano/, \
 NPeano.vo )

NATURALBINARYVO:=$(addprefix theories/Numbers/Natural/Binary/, \
 NBinDefs.vo 	NBinary.vo )

NATURALSPECVIAZVO:=$(addprefix theories/Numbers/Natural/SpecViaZ/, \
 NSig.vo	NSigNAxioms.vo )

NATURALBIGNVO:=$(addprefix theories/Numbers/Natural/BigN/, \
 Nbasic.vo 	NMake.vo 	BigN.vo )

NATURALVO:=$(NATURALABSTRACTVO) $(NATURALPEANOVO) $(NATURALBINARYVO) \
 $(NATURALSPECVIAZVO) $(NATURALBIGNVO)

INTEGERABSTRACTVO:=$(addprefix theories/Numbers/Integer/Abstract/, \
 ZAxioms.vo 	ZBase.vo 	ZAdd.vo 	ZMul.vo 	\
 ZLt.vo 	ZAddOrder.vo 	ZMulOrder.vo )

INTEGERBINARYVO:=$(addprefix theories/Numbers/Integer/Binary/, \
 ZBinary.vo )

INTEGERNATPAIRSVO:=$(addprefix theories/Numbers/Integer/NatPairs/, \
 ZNatPairs.vo )

INTEGERSPECVIAZVO:=$(addprefix theories/Numbers/Integer/SpecViaZ/, \
 ZSig.vo	ZSigZAxioms.vo )

INTEGERBIGZVO:=$(addprefix theories/Numbers/Integer/BigZ/, \
 ZMake.vo 	BigZ.vo )

INTEGERVO:=$(INTEGERABSTRACTVO) $(INTEGERBINARYVO) $(INTEGERNATPAIRSVO) \
 $(INTEGERSPECVIAZVO) $(INTEGERBIGZVO)

RATIONALSPECVIAQVO:=$(addprefix theories/Numbers/Rational/SpecViaQ/, \
 QSig.vo )

RATIONALBIGQVO:=$(addprefix theories/Numbers/Rational/BigQ/, \
 QMake.vo	BigQ.vo )

RATIONALVO:=$(RATIONALSPECVIAQVO) $(RATIONALBIGQVO)

NUMBERSVO:= $(NUMBERSCOMMONVO) $(NATURALVO) $(INTEGERVO) $(NATINTVO) $(CYCLICVO) $(RATIONALVO)

SETOIDSVO:=$(addprefix theories/Setoids/, \
 Setoid.vo ) 

UNICODEVO:=$(addprefix theories/Unicode/, \
 Utf8.vo )

CLASSESVO:=$(addprefix theories/Classes/, \
 Init.vo	RelationClasses.vo	Morphisms.vo	Morphisms_Prop.vo \
 Morphisms_Relations.vo	Functions.vo 	Equivalence.vo  SetoidTactics.vo  \
 SetoidClass.vo 	SetoidAxioms.vo EquivDec.vo 	SetoidDec.vo )

PROGRAMVO:=$(addprefix theories/Program/, \
 Tactics.vo 	Equality.vo 	Subset.vo	Utils.vo 	\
 Wf.vo 		Basics.vo	Combinators.vo	Syntax.vo 	Program.vo )

THEORIESVO:=\
  $(INITVO) $(LOGICVO) $(ARITHVO) $(BOOLVO) $(NARITHVO) $(ZARITHVO) \
  $(SETOIDSVO) $(LISTSVO) $(STRINGSVO) $(SETSVO) $(FSETSVO) \
  $(RELATIONSVO) $(WELLFOUNDEDVO) $(REALSVO)  $(SORTINGVO) $(QARITHVO) \
  $(NUMBERSVO) $(UNICODEVO) $(CLASSESVO) $(PROGRAMVO)

THEORIESLIGHTVO:= $(INITVO) $(LOGICVO) $(ARITHVO)

## Plugins

OMEGAVO:=$(addprefix plugins/omega/, \
 PreOmega.vo	OmegaLemmas.vo 	OmegaPlugin.vo Omega.vo )

ROMEGAVO:=$(addprefix plugins/romega/, \
 ReflOmegaCore.vo 	ROmega.vo )

MICROMEGAVO:=$(addprefix plugins/micromega/, \
  CheckerMaker.vo       Refl.vo \
  Env.vo                RingMicromega.vo \
  EnvRing.vo            VarMap.vo \
  OrderedRing.vo        ZCoeff.vo \
  Psatz.vo	       ZMicromega.vo \
  QMicromega.vo         RMicromega.vo \
  Tauto.vo )

QUOTEVO:=$(addprefix plugins/quote/, \
 Quote.vo )

RINGVO:=$(addprefix plugins/ring/, \
 LegacyArithRing.vo	Ring_normalize.vo \
 LegacyRing_theory.vo	LegacyRing.vo \
 LegacyNArithRing.vo    \
 LegacyZArithRing.vo	Ring_abstract.vo \
 Setoid_ring_normalize.vo \
 Setoid_ring.vo		Setoid_ring_theory.vo )

FIELDVO:=$(addprefix plugins/field/, \
 LegacyField_Compl.vo   LegacyField_Theory.vo \
 LegacyField_Tactic.vo  LegacyField.vo )

NEWRINGVO:=$(addprefix plugins/setoid_ring/, \
 BinList.vo   		Ring_theory.vo \
 Ring_polynom.vo	Ring_tac.vo \
 Ring_base.vo 		InitialRing.vo \
 Ring_equiv.vo 		Ring.vo \
 ArithRing.vo		NArithRing.vo \
 ZArithRing.vo		\
 Field_theory.vo	Field_tac.vo \
 Field.vo		RealField.vo )

GBVO:=$(addprefix plugins/groebner/, \
 GroebnerR.vo		GroebnerZ.vo )

XMLVO:= 

FOURIERVO:=$(addprefix plugins/fourier/, \
 Fourier_util.vo    	Fourier.vo )

FUNINDVO:= 

RECDEFVO:=$(addprefix plugins/funind/, \
 Recdef.vo )

CCVO:=

DPVO:=$(addprefix plugins/dp/, \
 Dp.vo )

RTAUTOVO:=$(addprefix plugins/rtauto/, \
 Bintree.vo	Rtauto.vo )

ifneq ($(HASNATDYNLINK),false)
INTERFACEVO:=plugins/interface/CoqInterface.vo
else
INTERFACEVO:=
endif

PLUGINSVO:= $(OMEGAVO) $(ROMEGAVO) $(MICROMEGAVO) $(RINGVO) $(FIELDVO) \
	    $(XMLVO) $(FOURIERVO) $(CCVO) $(FUNINDVO) \
	    $(RTAUTOVO) $(RECDEFVO) $(NEWRINGVO) $(DPVO) $(QUOTEVO) \
            $(INTERFACEVO) $(GBVO)

ALLVO:= $(INITVO) $(THEORIESVO) $(PLUGINSVO)
VFILES:= $(ALLVO:.vo=.v)

# convert a (stdlib) filename into a module name:
# remove .vo, replace theories and plugins by Coq, and replace slashes by dots
vo_to_mod = $(subst /,.,$(patsubst theories/%,Coq.%,$(patsubst plugins/%,Coq.%,$(1:.vo=))))

ALLMODS:=$(call vo_to_mod,$(ALLVO))

LIBFILES:=$(THEORIESVO) $(PLUGINSVO)
LIBFILESLIGHT:=$(THEORIESLIGHTVO)

## Specials

MANPAGES:=man/coq-tex.1 man/coqdep.1 man/gallina.1 \
	man/coqc.1 man/coqtop.1 man/coqtop.byte.1 man/coqtop.opt.1 \
	man/coqwc.1 man/coqdoc.1 man/coqide.1 \
	man/coq_makefile.1 man/coqmktop.1

PCOQMANPAGES:=man/coq-interface.1 man/coq-parser.1


###########################################################################
# Miscellaneous
###########################################################################

DATE=$(shell LANG=C date +"%B %Y")

SOURCEDOCDIR=dev/source-doc

CAML_OBJECT_PATTERNS:=%.cmo %.cmx %.cmi %.cma %.cmxa %.cmxs %.dep.ps %.dot

### Targets forwarded by Makefile to a specific stage:

## Enumeration of targets that require being done at stage1

STAGE1_TARGETS:= $(STAGE1) $(COQDEPBOOT) \
  $(GENFILES) \
  source-doc revision toplevel/mltop.byteml toplevel/mltop.optml \
  $(STAGE1_ML4:.ml4=.ml4-preprocessed) %.o

ifdef CM_STAGE1
 STAGE1_TARGETS+=$(CAML_OBJECT_PATTERNS)
endif

## Enumeration of targets that require being done at stage2

VO_TARGETS:=logic arith bool narith zarith qarith lists strings sets \
  fsets allfsets relations wellfounded ints reals allreals \
  setoids sorting natural integer rational numbers noreal \
  omega micromega ring setoid_ring dp xml extraction field fourier \
  funind cc subtac rtauto

DOC_TARGETS:=doc doc-html doc-ps doc-pdf stdlib refman tutorial faq \
  rectutorial refman-quick refman-nodep stdlib-nodep

STAGE2_TARGETS:=$(COQBINARIES) lib kernel byterun library proofs tactics \
  interp parsing pretyping highparsing toplevel hightactics \
  coqide-binaries coqide-byte coqide-opt $(COQIDEOPT) $(COQIDEBYTE) $(COQIDE) \
  pcoq-binaries $(COQINTERFACE) $(CSDPCERT) coqbinaries pcoq $(TOOLS) tools \
  printers debug initplugins plugins \
  world install coqide coqide-files coq coqlib \
  coqlight states pcoq-files check init theories theories-light \
  $(DOC_TARGETS) $(VO_TARGETS) validate \
  %.vo %.glob states/% install-% %.ml4-preprocessed

ifndef CM_STAGE1
 STAGE2_TARGETS+=$(CAML_OBJECT_PATTERNS)
endif


# For emacs: 
# Local Variables: 
# mode: makefile 
# End:
