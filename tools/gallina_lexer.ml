# 11 "tools/gallina_lexer.mll"
 
 open Lexing

 let chan_out = ref stdout

 let comment_depth = ref 0
 let cRcpt = ref 0
 let comments = ref true
 let print s = output_string !chan_out s
 
 exception Fin_fichier


# 16 "tools/gallina_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\240\255\241\255\242\255\002\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\001\000\000\000\002\000\000\000\
    \001\000\005\000\002\000\001\000\006\000\001\000\004\000\255\255\
    \006\000\002\000\006\000\002\000\005\000\007\000\010\000\006\000\
    \006\000\246\255\014\000\015\000\003\000\011\000\254\255\026\000\
    \010\000\013\000\253\255\018\000\031\000\015\000\023\000\018\000\
    \252\255\034\000\024\000\020\000\251\255\019\000\020\000\034\000\
    \037\000\021\000\028\000\038\000\025\000\026\000\045\000\250\255\
    \040\000\038\000\034\000\040\000\030\000\042\000\037\000\039\000\
    \047\000\249\255\040\000\035\000\053\000\143\000\248\255\247\255\
    \045\000\054\000\057\000\053\000\062\000\044\000\060\000\153\000\
    \245\255\054\000\049\000\070\000\049\000\161\000\244\255\243\255\
    \037\000\009\000\251\255\252\255\000\000\002\000\255\255\055\000\
    \253\255\163\000\019\000\252\255\253\255\007\000\011\000\255\255\
    \254\255\028\000\254\255\032\000\034\000\035\000\130\000\131\000\
    \138\000\251\255\252\255\033\000\027\000\170\000\255\255\254\255\
    \253\255\141\000\252\255\253\255\047\000\181\000\255\255\254\255\
    \157\000\251\255\252\255\049\000\191\000\254\255\255\255\253\255\
    \189\000\252\255\253\255\254\255\173\000\146\000\243\255\244\255\
    \052\000\092\000\109\000\107\000\108\000\113\000\094\000\114\000\
    \207\000\254\255\255\255\118\000\215\000\252\255\253\255\117\000\
    \117\000\120\000\130\000\132\000\225\000\250\255\251\255\122\000\
    \122\000\121\000\231\000\248\255\249\255\131\000\132\000\143\000\
    \241\000\246\255\247\255\237\000\240\000\245\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\004\000\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\001\000\001\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\004\000\004\000\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\004\000\004\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \012\000\012\000\012\000\012\000\012\000\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\008\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\098\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \000\000\255\255\107\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\115\000\000\000\117\000\117\000\117\000\117\000\117\000\
    \121\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\130\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \137\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \145\000\000\000\000\000\000\000\255\255\150\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\003\000\096\000\003\000\023\000\023\000\033\000\
    \033\000\023\000\000\000\033\000\038\000\038\000\042\000\042\000\
    \038\000\000\000\042\000\048\000\048\000\052\000\052\000\048\000\
    \004\000\052\000\096\000\000\000\023\000\000\000\033\000\000\000\
    \005\000\103\000\095\000\038\000\102\000\042\000\096\000\003\000\
    \112\000\101\000\048\000\100\000\052\000\111\000\063\000\063\000\
    \073\000\073\000\063\000\110\000\073\000\109\000\078\000\078\000\
    \105\000\104\000\078\000\010\000\009\000\096\000\013\000\011\000\
    \008\000\007\000\114\000\128\000\014\000\063\000\255\255\073\000\
    \255\255\255\255\012\000\006\000\015\000\078\000\116\000\105\000\
    \127\000\135\000\119\000\143\000\119\000\119\000\189\000\118\000\
    \000\000\039\000\024\000\028\000\037\000\064\000\043\000\034\000\
    \017\000\074\000\018\000\021\000\030\000\080\000\022\000\053\000\
    \049\000\019\000\016\000\020\000\025\000\026\000\027\000\029\000\
    \031\000\089\000\032\000\035\000\036\000\040\000\041\000\044\000\
    \045\000\046\000\047\000\050\000\051\000\054\000\055\000\056\000\
    \057\000\058\000\059\000\060\000\061\000\062\000\065\000\066\000\
    \067\000\068\000\069\000\070\000\071\000\072\000\075\000\076\000\
    \079\000\079\000\081\000\082\000\079\000\083\000\084\000\085\000\
    \086\000\087\000\088\000\088\000\090\000\091\000\088\000\092\000\
    \077\000\093\000\094\000\094\000\105\000\104\000\094\000\079\000\
    \255\255\255\255\123\000\126\000\126\000\132\000\148\000\126\000\
    \125\000\088\000\152\000\133\000\119\000\119\000\134\000\134\000\
    \118\000\094\000\134\000\105\000\124\000\139\000\148\000\147\000\
    \141\000\142\000\126\000\140\000\141\000\148\000\181\000\175\000\
    \167\000\163\000\158\000\154\000\159\000\134\000\155\000\160\000\
    \161\000\161\000\164\000\168\000\161\000\148\000\169\000\141\000\
    \165\000\165\000\153\000\156\000\165\000\157\000\170\000\171\000\
    \172\000\176\000\173\000\173\000\177\000\178\000\173\000\161\000\
    \179\000\179\000\182\000\183\000\179\000\184\000\188\000\165\000\
    \000\000\188\000\187\000\186\000\000\000\162\000\186\000\000\000\
    \002\000\173\000\000\000\000\000\000\000\166\000\000\000\179\000\
    \000\000\099\000\000\000\000\000\000\000\188\000\000\000\174\000\
    \188\000\187\000\000\000\108\000\000\000\180\000\000\000\000\000\
    \000\000\000\000\000\000\185\000\255\255\000\000\185\000\185\000\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\122\000\000\000\000\000\131\000\000\000\000\000\
    \000\000\000\000\151\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\126\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\134\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\146\000\000\000\141\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\004\000\022\000\022\000\032\000\
    \032\000\022\000\255\255\032\000\037\000\037\000\041\000\041\000\
    \037\000\255\255\041\000\047\000\047\000\051\000\051\000\047\000\
    \000\000\051\000\004\000\255\255\022\000\255\255\032\000\255\255\
    \000\000\100\000\005\000\037\000\101\000\041\000\096\000\096\000\
    \109\000\097\000\047\000\097\000\051\000\110\000\062\000\062\000\
    \072\000\072\000\062\000\106\000\072\000\106\000\076\000\076\000\
    \103\000\103\000\076\000\000\000\000\000\096\000\000\000\000\000\
    \000\000\000\000\113\000\123\000\000\000\062\000\115\000\072\000\
    \116\000\117\000\000\000\000\000\000\000\076\000\113\000\103\000\
    \124\000\132\000\115\000\139\000\116\000\117\000\152\000\116\000\
    \255\255\013\000\016\000\027\000\036\000\009\000\012\000\014\000\
    \015\000\008\000\017\000\020\000\029\000\007\000\021\000\010\000\
    \011\000\018\000\015\000\019\000\024\000\025\000\026\000\028\000\
    \030\000\006\000\031\000\034\000\035\000\039\000\040\000\043\000\
    \044\000\045\000\046\000\049\000\050\000\053\000\054\000\055\000\
    \056\000\057\000\058\000\059\000\060\000\061\000\064\000\065\000\
    \066\000\067\000\068\000\069\000\070\000\071\000\074\000\075\000\
    \077\000\077\000\080\000\081\000\077\000\082\000\083\000\084\000\
    \085\000\086\000\087\000\087\000\089\000\090\000\087\000\091\000\
    \076\000\092\000\093\000\093\000\105\000\105\000\093\000\077\000\
    \118\000\119\000\120\000\125\000\125\000\129\000\148\000\125\000\
    \120\000\087\000\149\000\129\000\118\000\119\000\133\000\133\000\
    \119\000\093\000\133\000\105\000\120\000\136\000\144\000\144\000\
    \140\000\140\000\125\000\136\000\140\000\148\000\153\000\154\000\
    \155\000\156\000\157\000\149\000\158\000\133\000\149\000\159\000\
    \160\000\160\000\163\000\167\000\160\000\144\000\168\000\140\000\
    \164\000\164\000\149\000\149\000\164\000\149\000\169\000\170\000\
    \171\000\175\000\172\000\172\000\176\000\177\000\172\000\160\000\
    \178\000\178\000\181\000\182\000\178\000\183\000\187\000\164\000\
    \255\255\188\000\184\000\184\000\255\255\160\000\184\000\255\255\
    \000\000\172\000\255\255\255\255\255\255\164\000\255\255\178\000\
    \255\255\097\000\255\255\255\255\255\255\187\000\255\255\172\000\
    \188\000\184\000\255\255\106\000\255\255\178\000\255\255\255\255\
    \255\255\255\255\255\255\187\000\113\000\255\255\188\000\184\000\
    \115\000\255\255\116\000\117\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\118\000\119\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\120\000\255\255\255\255\129\000\255\255\255\255\
    \255\255\255\255\149\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\136\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\125\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\133\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\144\000\255\255\140\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec action lexbuf =
    __ocaml_lex_action_rec lexbuf 0
and __ocaml_lex_action_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 29 "tools/gallina_lexer.mll"
                    ( print "Theorem "; body lexbuf; 
  	              cRcpt := 1; action lexbuf )
# 243 "tools/gallina_lexer.ml"

  | 1 ->
# 31 "tools/gallina_lexer.mll"
                    ( print "Lemma ";   body lexbuf; 
      	       	      cRcpt := 1; action lexbuf )
# 249 "tools/gallina_lexer.ml"

  | 2 ->
# 33 "tools/gallina_lexer.mll"
                    ( print "Fact ";   body lexbuf; 
      	       	      cRcpt := 1; action lexbuf )
# 255 "tools/gallina_lexer.ml"

  | 3 ->
# 35 "tools/gallina_lexer.mll"
                    ( print "Remark ";  body lexbuf; 
      	       	      cRcpt := 1; action lexbuf )
# 261 "tools/gallina_lexer.ml"

  | 4 ->
# 37 "tools/gallina_lexer.mll"
                    ( print "Goal ";    body lexbuf; 
      	       	      cRcpt := 1; action lexbuf )
# 267 "tools/gallina_lexer.ml"

  | 5 ->
# 39 "tools/gallina_lexer.mll"
                        ( print "Correctness "; body_pgm lexbuf; 
      	       	          cRcpt := 1; action lexbuf )
# 273 "tools/gallina_lexer.ml"

  | 6 ->
# 41 "tools/gallina_lexer.mll"
                        ( print "Definition "; body_def lexbuf;
			  cRcpt := 1; action lexbuf )
# 279 "tools/gallina_lexer.ml"

  | 7 ->
# 43 "tools/gallina_lexer.mll"
                        ( skip_until_point lexbuf ; action lexbuf )
# 284 "tools/gallina_lexer.ml"

  | 8 ->
# 44 "tools/gallina_lexer.mll"
                         ( skip_until_point lexbuf ; action lexbuf )
# 289 "tools/gallina_lexer.ml"

  | 9 ->
# 45 "tools/gallina_lexer.mll"
                        ( skip_until_point lexbuf ; action lexbuf )
# 294 "tools/gallina_lexer.ml"

  | 10 ->
# 46 "tools/gallina_lexer.mll"
                        ( skip_until_point lexbuf ; action lexbuf )
# 299 "tools/gallina_lexer.ml"

  | 11 ->
# 47 "tools/gallina_lexer.mll"
                        ( skip_until_point lexbuf ; action lexbuf )
# 304 "tools/gallina_lexer.ml"

  | 12 ->
# 48 "tools/gallina_lexer.mll"
              ( (if !comments then print "(*");
		comment_depth := 1;
      	        comment lexbuf;
		cRcpt := 0; action lexbuf )
# 312 "tools/gallina_lexer.ml"

  | 13 ->
# 52 "tools/gallina_lexer.mll"
                          ( if !cRcpt < 2 then print "\n";
      	       	       	    cRcpt := !cRcpt+1; action lexbuf)
# 318 "tools/gallina_lexer.ml"

  | 14 ->
# 54 "tools/gallina_lexer.mll"
              ( raise Fin_fichier)
# 323 "tools/gallina_lexer.ml"

  | 15 ->
# 55 "tools/gallina_lexer.mll"
              ( print (Lexing.lexeme lexbuf); cRcpt := 0; action lexbuf )
# 328 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_action_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 97
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 58 "tools/gallina_lexer.mll"
          ( (if !comments then print "(*"); 
      	    comment_depth := succ !comment_depth; comment lexbuf )
# 341 "tools/gallina_lexer.ml"

  | 1 ->
# 60 "tools/gallina_lexer.mll"
          ( (if !comments then print "*)");
      	    comment_depth := pred !comment_depth;
            if !comment_depth > 0 then comment lexbuf )
# 348 "tools/gallina_lexer.ml"

  | 2 ->
# 63 "tools/gallina_lexer.mll"
                        ( (if !comments then print (Lexing.lexeme lexbuf));
      			  comment_depth := pred !comment_depth;
			  if !comment_depth > 0 then comment lexbuf )
# 355 "tools/gallina_lexer.ml"

  | 3 ->
# 66 "tools/gallina_lexer.mll"
          ( raise Fin_fichier )
# 360 "tools/gallina_lexer.ml"

  | 4 ->
# 67 "tools/gallina_lexer.mll"
          ( (if !comments then print (Lexing.lexeme lexbuf)); 
	    comment lexbuf )
# 366 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and skip_comment lexbuf =
    __ocaml_lex_skip_comment_rec lexbuf 106
and __ocaml_lex_skip_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 71 "tools/gallina_lexer.mll"
          ( comment_depth := succ !comment_depth; skip_comment lexbuf )
# 378 "tools/gallina_lexer.ml"

  | 1 ->
# 72 "tools/gallina_lexer.mll"
          ( comment_depth := pred !comment_depth;
            if !comment_depth > 0 then skip_comment lexbuf )
# 384 "tools/gallina_lexer.ml"

  | 2 ->
# 74 "tools/gallina_lexer.mll"
          ( raise Fin_fichier )
# 389 "tools/gallina_lexer.ml"

  | 3 ->
# 75 "tools/gallina_lexer.mll"
          ( skip_comment lexbuf )
# 394 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_skip_comment_rec lexbuf __ocaml_lex_state

and body_def lexbuf =
    __ocaml_lex_body_def_rec lexbuf 113
and __ocaml_lex_body_def_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 78 "tools/gallina_lexer.mll"
                 ( print (Lexing.lexeme lexbuf); () )
# 406 "tools/gallina_lexer.ml"

  | 1 ->
# 79 "tools/gallina_lexer.mll"
                 ( print (Lexing.lexeme lexbuf); body lexbuf )
# 411 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_body_def_rec lexbuf __ocaml_lex_state

and body lexbuf =
    __ocaml_lex_body_rec lexbuf 120
and __ocaml_lex_body_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 82 "tools/gallina_lexer.mll"
           ( print ".\n"; skip_proof lexbuf )
# 423 "tools/gallina_lexer.ml"

  | 1 ->
# 83 "tools/gallina_lexer.mll"
           ( print ".\n"; skip_proof lexbuf )
# 428 "tools/gallina_lexer.ml"

  | 2 ->
# 84 "tools/gallina_lexer.mll"
           ( print "(*"; comment_depth := 1;
      	     comment lexbuf; body lexbuf )
# 434 "tools/gallina_lexer.ml"

  | 3 ->
# 86 "tools/gallina_lexer.mll"
           ( raise Fin_fichier )
# 439 "tools/gallina_lexer.ml"

  | 4 ->
# 87 "tools/gallina_lexer.mll"
           ( print (Lexing.lexeme lexbuf); body lexbuf )
# 444 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_body_rec lexbuf __ocaml_lex_state

and body_pgm lexbuf =
    __ocaml_lex_body_pgm_rec lexbuf 129
and __ocaml_lex_body_pgm_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "tools/gallina_lexer.mll"
           ( print ".\n"; skip_proof lexbuf )
# 456 "tools/gallina_lexer.ml"

  | 1 ->
# 91 "tools/gallina_lexer.mll"
           ( print "(*"; comment_depth := 1;
      	     comment lexbuf; body_pgm lexbuf )
# 462 "tools/gallina_lexer.ml"

  | 2 ->
# 93 "tools/gallina_lexer.mll"
           ( raise Fin_fichier )
# 467 "tools/gallina_lexer.ml"

  | 3 ->
# 94 "tools/gallina_lexer.mll"
           ( print (Lexing.lexeme lexbuf); body_pgm lexbuf )
# 472 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_body_pgm_rec lexbuf __ocaml_lex_state

and skip_until_point lexbuf =
    __ocaml_lex_skip_until_point_rec lexbuf 136
and __ocaml_lex_skip_until_point_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 97 "tools/gallina_lexer.mll"
             ( () )
# 484 "tools/gallina_lexer.ml"

  | 1 ->
# 98 "tools/gallina_lexer.mll"
             ( end_of_line lexbuf )
# 489 "tools/gallina_lexer.ml"

  | 2 ->
# 99 "tools/gallina_lexer.mll"
             ( comment_depth := 1;
      	       skip_comment lexbuf; skip_until_point lexbuf )
# 495 "tools/gallina_lexer.ml"

  | 3 ->
# 101 "tools/gallina_lexer.mll"
             ( raise Fin_fichier )
# 500 "tools/gallina_lexer.ml"

  | 4 ->
# 102 "tools/gallina_lexer.mll"
             ( skip_until_point lexbuf )
# 505 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_skip_until_point_rec lexbuf __ocaml_lex_state

and end_of_line lexbuf =
    __ocaml_lex_end_of_line_rec lexbuf 144
and __ocaml_lex_end_of_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 105 "tools/gallina_lexer.mll"
                 ( end_of_line lexbuf )
# 517 "tools/gallina_lexer.ml"

  | 1 ->
# 106 "tools/gallina_lexer.mll"
          ( () )
# 522 "tools/gallina_lexer.ml"

  | 2 ->
# 107 "tools/gallina_lexer.mll"
                 ( raise Fin_fichier )
# 527 "tools/gallina_lexer.ml"

  | 3 ->
# 108 "tools/gallina_lexer.mll"
          ( print (Lexing.lexeme lexbuf) )
# 532 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_end_of_line_rec lexbuf __ocaml_lex_state

and skip_proof lexbuf =
    __ocaml_lex_skip_proof_rec lexbuf 149
and __ocaml_lex_skip_proof_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 111 "tools/gallina_lexer.mll"
            ( end_of_line lexbuf )
# 544 "tools/gallina_lexer.ml"

  | 1 ->
# 113 "tools/gallina_lexer.mll"
                ( skip_until_point lexbuf )
# 549 "tools/gallina_lexer.ml"

  | 2 ->
# 114 "tools/gallina_lexer.mll"
             ( end_of_line lexbuf )
# 554 "tools/gallina_lexer.ml"

  | 3 ->
# 116 "tools/gallina_lexer.mll"
                ( skip_until_point lexbuf )
# 559 "tools/gallina_lexer.ml"

  | 4 ->
# 117 "tools/gallina_lexer.mll"
                ( end_of_line lexbuf )
# 564 "tools/gallina_lexer.ml"

  | 5 ->
# 119 "tools/gallina_lexer.mll"
                ( skip_until_point lexbuf )
# 569 "tools/gallina_lexer.ml"

  | 6 ->
# 120 "tools/gallina_lexer.mll"
              ( end_of_line lexbuf )
# 574 "tools/gallina_lexer.ml"

  | 7 ->
# 122 "tools/gallina_lexer.mll"
                ( skip_until_point lexbuf )
# 579 "tools/gallina_lexer.ml"

  | 8 ->
# 123 "tools/gallina_lexer.mll"
                    ( skip_until_point lexbuf )
# 584 "tools/gallina_lexer.ml"

  | 9 ->
# 124 "tools/gallina_lexer.mll"
                             ( skip_proof lexbuf )
# 589 "tools/gallina_lexer.ml"

  | 10 ->
# 125 "tools/gallina_lexer.mll"
            ( comment_depth := 1;
      	      skip_comment lexbuf; skip_proof lexbuf )
# 595 "tools/gallina_lexer.ml"

  | 11 ->
# 127 "tools/gallina_lexer.mll"
            ( raise Fin_fichier )
# 600 "tools/gallina_lexer.ml"

  | 12 ->
# 128 "tools/gallina_lexer.mll"
            ( skip_proof lexbuf )
# 605 "tools/gallina_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_skip_proof_rec lexbuf __ocaml_lex_state

;;

